import {
  require_jsx_runtime
} from "./chunk-VTQ2JCVL.js";
import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/hiding-header-react/dist/index.es.js
var import_jsx_runtime = __toESM(require_jsx_runtime());

// node_modules/hiding-header/dist/index.es.js
function hidingHeader(container, _a) {
  var _b = _a === void 0 ? {} : _a, _c = _b.heightPropertyName, heightPropertyName = _c === void 0 ? "--hidingHeader-height" : _c, _d = _b.boundsHeightPropertyName, boundsHeightPropertyName = _d === void 0 ? "--hidingHeader-bounds-height" : _d, _e = _b.animationOffsetPropertyName, animationOffsetPropertyName = _e === void 0 ? "--hidingHeader-animation-offset" : _e, _f = _b.snap, snap = _f === void 0 ? true : _f, _g = _b.onHeightChange, onHeightChange = _g === void 0 ? function() {
  } : _g, _h = _b.onVisibleHeightChange, onVisibleHeightChange = _h === void 0 ? function() {
  } : _h, _j = _b.onHomeChange, onHomeChange = _j === void 0 ? function() {
  } : _j;
  var content = container.querySelector("*");
  var lastScrollTopPosition = 0;
  var contentHeight = function() {
    var getContentHeight = function() {
      return content.clientHeight;
    };
    var setContentHeightProperty = function(height) {
      container.style.setProperty(heightPropertyName, height + "px");
    };
    var resizeObserver = new ResizeObserver(function() {
      var newContentHeight = getContentHeight();
      if (contentHeight !== newContentHeight) {
        contentHeight = newContentHeight;
        setContentHeightProperty(contentHeight);
        onScroll();
        onHeightChange(contentHeight);
      }
    });
    resizeObserver.observe(content);
    var initialHeight = getContentHeight();
    setContentHeightProperty(initialHeight);
    return initialHeight;
  }();
  var visibleHeight = contentHeight;
  var paused = false;
  var home = true;
  var lastBoundsHeight = 0;
  var pointersDown = 0;
  var parent = container.parentElement;
  if (parent === null) {
    throw new Error("Missing parent element.");
  }
  var getParentHeight = function() {
    return parent.clientHeight;
  };
  var getGlobalTopOffset = function() {
    return container.offsetTop;
  };
  var getRelativeTopOffset = function() {
    var _a2;
    return getGlobalTopOffset() - (((_a2 = container.parentElement) === null || _a2 === void 0 ? void 0 : _a2.offsetTop) || 0);
  };
  var animateOffset = function(initialOffset) {
    if (initialOffset === 0) {
      return;
    }
    content.style.transition = "none";
    container.style.setProperty(animationOffsetPropertyName, initialOffset + "px");
    content.offsetHeight;
    content.style.transition = "";
    container.style.setProperty(animationOffsetPropertyName, "0px");
  };
  var updateBoundsHeight = function(boundsHeight) {
    if (boundsHeight !== lastBoundsHeight) {
      container.style.setProperty(boundsHeightPropertyName, boundsHeight + "px");
      lastBoundsHeight = boundsHeight;
    }
  };
  var capBoundsHeight = function(rawBoundsHeight) {
    return Math.min(getParentHeight() - getRelativeTopOffset(), Math.max(contentHeight, rawBoundsHeight));
  };
  var snapIfPossible = function() {
    if (snap && visibleHeight !== 0 && visibleHeight !== contentHeight) {
      if (visibleHeight < contentHeight / 2) {
        hide();
      } else {
        reveal();
      }
    }
  };
  var onScrollStopDebounced = function() {
    var timer;
    return function() {
      window.clearTimeout(timer);
      timer = window.setTimeout(function() {
        if (snap && pointersDown === 0) {
          snapIfPossible();
        }
      }, 100);
    };
  }();
  var updateVisibleHeight = function() {
    visibleHeight = function() {
      var top = content.getBoundingClientRect().top;
      var newVisibleHeight = Math.max(0, Math.min(contentHeight + top, contentHeight));
      if (visibleHeight !== newVisibleHeight) {
        onVisibleHeightChange(newVisibleHeight);
      }
      return newVisibleHeight;
    }();
  };
  var updateHome = function() {
    home = function() {
      var newHome = contentHeight >= lastBoundsHeight;
      if (home !== newHome) {
        onHomeChange(newHome);
      }
      return newHome;
    }();
  };
  var onTransitioning = function() {
    updateVisibleHeight();
  };
  (function() {
    var running = false;
    var loop = function() {
      if (!running) {
        return;
      }
      onTransitioning();
      requestAnimationFrame(loop);
    };
    content.addEventListener("transitionstart", function() {
      running = true;
      loop();
    });
    content.addEventListener("transitionend", function() {
      running = false;
      onTransitioning();
    });
  })();
  var onScroll = function() {
    var globalTopOffset = getGlobalTopOffset();
    var scrollTopPosition = window.scrollY;
    var isScrollingDown = scrollTopPosition > lastScrollTopPosition;
    if (!paused) {
      var boundsHeight = capBoundsHeight(function() {
        if (isScrollingDown) {
          var newBoundsHeight = scrollTopPosition - globalTopOffset;
          if (lastBoundsHeight < newBoundsHeight) {
            return newBoundsHeight;
          }
          return lastBoundsHeight;
        } else {
          var newBoundsHeight = scrollTopPosition - globalTopOffset + contentHeight;
          if (lastBoundsHeight > newBoundsHeight) {
            return newBoundsHeight;
          }
          return lastBoundsHeight;
        }
      }());
      updateBoundsHeight(boundsHeight);
      onScrollStopDebounced();
      updateVisibleHeight();
      updateHome();
    }
    lastScrollTopPosition = scrollTopPosition;
  };
  var onResize = onScroll;
  var onPointerDown = function() {
    pointersDown++;
    onScroll();
  };
  var onPointerUp = function() {
    pointersDown--;
    onScroll();
  };
  var initialize = function() {
    window.addEventListener("scroll", onScroll);
    window.addEventListener("resize", onResize);
    document.addEventListener("pointerdown", onPointerDown);
    document.addEventListener("pointerup", onPointerUp);
    onScroll();
  };
  var destroy = function() {
    window.removeEventListener("scroll", onScroll);
    window.removeEventListener("resize", onResize);
    document.removeEventListener("pointerdown", onPointerDown);
    document.removeEventListener("pointerup", onPointerUp);
  };
  initialize();
  var run = function() {
    paused = false;
  };
  var pause = function() {
    paused = true;
  };
  var isPaused = function() {
    return paused;
  };
  var isHome = function() {
    return home;
  };
  var reveal = function() {
    var scrollTopPosition = window.scrollY;
    var globalTopOffset = getGlobalTopOffset();
    var boundsHeight = capBoundsHeight(scrollTopPosition - globalTopOffset + contentHeight);
    animateOffset(lastBoundsHeight - boundsHeight);
    updateBoundsHeight(boundsHeight);
  };
  var hide = function() {
    var scrollTopPosition = window.scrollY;
    var globalTopOffset = getGlobalTopOffset();
    var boundsHeight = capBoundsHeight(scrollTopPosition - globalTopOffset);
    animateOffset(lastBoundsHeight - boundsHeight);
    updateBoundsHeight(boundsHeight);
  };
  var getHeight = function() {
    return contentHeight;
  };
  var getVisibleHeight = function() {
    return visibleHeight;
  };
  return {
    run,
    pause,
    isPaused,
    isHome,
    reveal,
    hide,
    getHeight,
    getVisibleHeight,
    destroy
  };
}

// node_modules/hiding-header-react/dist/index.es.js
var import_react = __toESM(require_react());
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var Context = (0, import_react.createContext)(void 0);
var useHidingHeader = function() {
  return (0, import_react.useContext)(Context);
};
var useRunHidingHeader = function() {
  var _a;
  return (_a = (0, import_react.useContext)(Context)) === null || _a === void 0 ? void 0 : _a.run;
};
var usePauseHidingHeader = function() {
  var _a;
  return (_a = (0, import_react.useContext)(Context)) === null || _a === void 0 ? void 0 : _a.pause;
};
var useRevealHidingHeader = function() {
  var _a;
  return (_a = (0, import_react.useContext)(Context)) === null || _a === void 0 ? void 0 : _a.reveal;
};
var useHideHidingHeader = function() {
  var _a;
  return (_a = (0, import_react.useContext)(Context)) === null || _a === void 0 ? void 0 : _a.hide;
};
var HidingHeader = function(_a) {
  var children = _a.children, _b = _a.className, className = _b === void 0 ? "hidingHeader" : _b, _c = _a.innerClassName, innerClassName = _c === void 0 ? "hidingHeader-in" : _c, _d = _a.component, Tag = _d === void 0 ? "div" : _d, heightPropertyName = _a.heightPropertyName, boundsHeightPropertyName = _a.boundsHeightPropertyName, animationOffsetPropertyName = _a.animationOffsetPropertyName, snap = _a.snap, onHeightChange = _a.onHeightChange, onVisibleHeightChange = _a.onVisibleHeightChange, onHomeChange = _a.onHomeChange;
  var container = (0, import_react.useRef)(null);
  var _e = (0, import_react.useState)(), hidingHeaderInstance = _e[0], setHidingHeaderInstance = _e[1];
  (0, import_react.useEffect)(function() {
    var instance = hidingHeader(container.current, {
      heightPropertyName,
      boundsHeightPropertyName,
      animationOffsetPropertyName,
      snap,
      onHeightChange,
      onVisibleHeightChange,
      onHomeChange
    });
    setHidingHeaderInstance(instance);
    return function() {
      instance.destroy();
    };
  }, []);
  return (0, import_jsx_runtime.jsx)(Tag, __assign({ className, ref: container }, { children: (0, import_jsx_runtime.jsx)("div", __assign({ className: innerClassName }, { children: (0, import_jsx_runtime.jsx)(Context.Provider, __assign({ value: hidingHeaderInstance }, { children }), void 0) }), void 0) }), void 0);
};
export {
  HidingHeader,
  useHideHidingHeader,
  useHidingHeader,
  usePauseHidingHeader,
  useRevealHidingHeader,
  useRunHidingHeader
};
/*! Bundled license information:

hiding-header-react/dist/index.es.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
//# sourceMappingURL=hiding-header-react.js.map
