{
  "version": 3,
  "sources": ["../../react-pendulum/src/MultiProvider/MultiProvider.tsx", "../../react-pendulum/src/utils/with-context.tsx"],
  "sourcesContent": ["import React from 'react'\n\nconst chainAsChildren = (\n  children: React.ReactNode,\n  component: React.ReactElement\n) => React.cloneElement(component, {}, children)\n\nexport type MultiProviderProps = React.PropsWithChildren<{\n  providers: React.ReactElement[]\n}>\n\nconst MultiProvider: React.FC<MultiProviderProps> = ({\n  children,\n  providers\n}) => (\n  <React.Fragment>\n    {providers.reduceRight(chainAsChildren, children)}\n  </React.Fragment>\n)\n\nexport default MultiProvider\n", "import React, { useContext } from 'react'\n\nconst withContext = <\n  ContextValue,\n  PropNameType extends keyof any,\n  ContextValueAsPropsType = Record<PropNameType, ContextValue>\n>(\n  Context: React.Context<ContextValue>,\n  propsName: PropNameType\n) => <Props extends ContextValueAsPropsType>(\n  Component: React.ComponentType<Props>\n): React.ComponentType<Omit<Props, PropNameType>> => (props) => {\n  const value = useContext(Context)\n  const additionalProps = ({\n    [propsName]: value\n  } as unknown) as ContextValueAsPropsType\n  // @ts-ignore\n  return <Component {...props} {...additionalProps} />\n}\n\nexport default withContext\n"],
  "mappings": ";;;;;;;;;AAEA,IAAMA,kBAAkB,SAAlBA,iBACJC,UACAC,WAFsB;AAAA,SAGnBC,aAAAA,QAAMC,aAAaF,WAAW,CAAA,GAAID,QAAlC;AAHmB;AASxB,IAAMI,gBAA8C,SAA9CA,eAA8C,MAAA;AAAA,MAClDJ,WADkD,KAClDA,UACAK,YAFkD,KAElDA;AAFkD,SAIlDH,aAAAA,QAAAA,cAACA,aAAAA,QAAMI,UAAP,MACGD,UAAUE,YAAYR,iBAAiBC,QAAvC,CADH;AAJkD;ACTpD,IAAMQ,cAAc,SAAdA,aAKJC,SACAC,WANkB;AAAA,SAOf,SACHC,WADG;AAAA,WAEgD,SAACC,OAAD;;AACnD,UAAMC,YAAQC,yBAAWL,OAAD;AACxB,UAAMM,mBAAe,mBAAA,CAAA,GAAA,iBAClBL,SADkB,IACNG,OADM;AAIrB,aAAOX,aAAAA,QAAAA,cAACS,WAAD,OAAA,OAAA,CAAA,GAAeC,OAAWG,eAAAA,CAA1B;IACR;EATI;AAPe;",
  "names": ["chainAsChildren", "children", "component", "React", "cloneElement", "MultiProvider", "providers", "Fragment", "reduceRight", "withContext", "Context", "propsName", "Component", "props", "value", "useContext", "additionalProps"]
}
